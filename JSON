import json

data = '''
{
  "name" : "Mega",
  "phone" : {
    "type" : "intl",
    "number" : "+1 734 303 4456"
   },
   "email" : {
     "hide" : "yes"
   }
}'''

info = json.loads(data)                 #convenient to use .loads() method here to convert from JSON syntax to Python list/dict
print('Name:', info["name"])            #'info is name of dict, then we just slice to pull out whatever we want
print('Hide:', info["email"]["hide"])

#json is essentially a python dict, with key-value pairs. 
#e.g. 'name' is a key, 'Mega' is a value, 'phone' is a key, the value is
#a nested dict with 'type' and 'number' inside of it. 
############################
import json

data = '''
[                           #essentially a list with 2 dicts
  { "id" : "001",           #dict 1
    "x" : "2",
    "name" : "Mega"
  } ,
  { "id" : "009",           #dict 2
    "x" : "7",
    "name" : "Hoang"
  }
]'''

info = json.loads(data)
print('User count:', len(info))

for item in info:
    print('Name', item['name'])
    print('Id', item['id'])
    print('Attribute', item['x'])
#####################################################
import json

# Note that Google is increasingly requiring keys
# for this API
serviceurl = 'http://maps.googleapis.com/maps/api/geocode/json?'

while True:
    address = input('Enter location: ')     #e.g. Philadelphia, PA
    if len(address) < 1: break              #so any input that's less than 1 breaks the code

    url = serviceurl + urllib.parse.urlencode({'address': address})     #basically just converts the address you input into proper format

    print('Retrieving', url)
    uh = urllib.request.urlopen(url)
    data = uh.read().decode()               #decode from UTF-8 or whatever format it's in to a more workable format
    print('Retrieved', len(data), 'characters')

    try:
        js = json.loads(data)                  #parses the data we get back from Google
    except:
        js = None

    if not js or 'status' not in js or js['status'] != 'OK':     #just some troubleshooting things
        print('==== Failure To Retrieve ====')
        print(data)
        continue

    print(json.dumps(js, indent=4))

    lat = js["results"][0]["geometry"]["location"]["lat"]
    lng = js["results"][0]["geometry"]["location"]["lng"]
    print('lat', lat, 'lng', lng)
    location = js['results'][0]['formatted_address']
    print(location)
############################
Assignment 1

import json
import urllib.request, urllib.parse, urllib.error
counts = list()
inp = input('Enter a URL: ')

print('Retrieving', inp)
url = urllib.request.urlopen(inp)
data = url.read()
print("length of data: ", len(data))

try:
    js = json.loads(data)
except:
    js = None

comments = js['comments']
for comment in comments:
    counts.append(comment['count'])

print("total number of counts: ", (sum(counts)))
####################
Assignment 2

import urllib, urllib.request, urllib.parse, urllib.error
import json

# serviceurl = 'http://maps.googleapis.com/maps/api/geocode/json?'
serviceurl = 'http://python-data.dr-chuck.net/geojson?'

while True:
    address = input('Enter location: ')
    if len(address) < 1 :
        address = 'South Federal University'

    url = serviceurl + urllib.parse.urlencode({'address': address})
    print('Retrieving', url)
    uh = urllib.request.urlopen(url)
    data = uh.read()
    print('Retrieved',len(data),'characters')

    try:
        js = json.loads(data)
    except:
        js = None

    if not js or 'status' not in js or js['status'] != 'OK':
        print('==== Failure To Retrieve ====')
        print(data)
        continue

    print(json.dumps(js, indent=4))

    print("Printing place_id: ", js['results'][0]['place_id'])
    
'''PROMPT:
Calling a JSON API

In this assignment you will write a Python program somewhat similar to http://www.py4e.com/code3/geojson.py. The program will prompt for a location, contact a web service and retrieve JSON for the web service and parse that data, and retrieve the first place_id from the JSON. A place ID is a textual identifier that uniquely identifies a place as within Google Maps.
API End Points

To complete this assignment, you should use this API endpoint that has a static subset of the Google Data:

http://py4e-data.dr-chuck.net/geojson?
This API uses the same parameter (address) as the Google API. This API also has no rate limit so you can test as often as you like. If you visit the URL with no parameters, you get a list of all of the address values which can be used with this API.
To call the API, you need to provide address that you are requesting as the address= parameter that is properly URL encoded using the urllib.urlencode() fuction as shown in http://www.py4e.com/code3/geojson.py

Test Data / Sample Execution

You can test to see if your program is working with a location of "South Federal University" which will have a place_id of "ChIJJ8oO7_B_bIcR2AlhC8nKlok".'''
