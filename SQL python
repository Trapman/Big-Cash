'''
Instructions
If you don't already have it, install the SQLite Browser from http://sqlitebrowser.org/.

Then, create a SQLITE database or use an existing database and create a table in the database called "Ages":


CREATE TABLE Ages ( 
  name VARCHAR(128), 
  age INTEGER
)


Then make sure the table is empty by deleting any rows that you previously inserted, 
and insert these rows and only these rows with the following commands:


DELETE FROM Ages;
INSERT INTO Ages (name, age) VALUES ('Shannyn', 32);
INSERT INTO Ages (name, age) VALUES ('Hassan', 25);
INSERT INTO Ages (name, age) VALUES ('Libbie', 39);
INSERT INTO Ages (name, age) VALUES ('Kamran', 20);


Once the inserts are done, run the following SQL command:

SELECT hex(name || age) AS X FROM Ages ORDER BY X

Find the first row in the resulting record set and enter the long string that looks like 53656C696E613333.

Note: This assignment must be done using SQLite - in particular, 
the SELECT query above will not work in any other database. So you cannot use MySQL or Oracle for this assignment.
'''

#super straight forward, just enter all commands directly into SQLite, no Python here.
#################################################################################################
PROBLEM #2

'''Counting Organizations
This application will read the mailbox data (mbox.txt) and count the number of email messages per organization 
(i.e. domain name of the email address) using a database with the following schema to maintain the counts.

CREATE TABLE Counts (org TEXT, count INTEGER)

When you have run the program on mbox.txt upload the resulting database file above for grading.
If you run the program multiple times in testing or with dfferent files, make sure to empty out the data before each run.

You can use this code as a starting point for your application: http://www.py4e.com/code3/emaildb.py.

The data file for this application is the same as in previous assignments: http://www.py4e.com/code3/mbox.txt.

Because the sample code is using an UPDATE statement and committing the results to the database as each record is read in the loop, 
it might take as long as a few minutes to process all the data. The commit insists on completely writing all the data to disk 
every time it is called.

The program can be speeded up greatly by moving the commit operation outside of the loop. In any database program, 
there is a balance between the number of operations you execute between commits and the importance of not losing the
results of operations that have not yet been committed.'''


import sqlite3

conn = sqlite3.connect('emaildb.sqlite')
cur = conn.cursor()

cur.execute('''
DROP TABLE IF EXISTS Counts''')

cur.execute('''
CREATE TABLE Counts (org TEXT, count INTEGER)''')

fname = input('Enter a file name: ')
if ( len(fname) < 1 ) : fname = 'mbox.txt'
fh = open(fname)
for line in fh:
    if not line.startswith('From: ') : continue
    pieces = line.split()
    email = pieces[1]
    parts = email.split('@')
    organization = parts[-1]
    cur.execute('SELECT count FROM Counts WHERE organization = ? ', (organization, ))
    row = cur.fetchone()
    if row is None:
        cur.execute('''INSERT INTO Counts (organization, count) 
                VALUES ( ?, 1 )''', ( organization, ) )
    else : 
        cur.execute('UPDATE Counts SET count=count+1 WHERE organization = ?', 
            (organization, ))
    conn.commit()

sqlstr = 'SELECT org, count FROM Counts ORDER BY count DESC LIMIT 10'

print
print("Counts:")
for row in cur.execute(sqlstr) :
    print(str(row[0]), row[1])

cur.close()

#iupui.edu with 536 total should be the most frequent result
